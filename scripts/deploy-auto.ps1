# üöÄ Script de Deploy Autom√°tico Inteligente - T√¥ De Olho (Windows)
# ==================================================================
# Autor: Sistema de Deploy Automatizado  
# Descri√ß√£o: Deploy inteligente com controle autom√°tico de backfill

param(
    [switch]$Force = $false,
    [switch]$SkipBuild = $false,
    [int]$StartYear = 2022,
    [int]$EndYear = 0,
    [switch]$ForceBackfill = $false
)

# Configura√ß√£o de cores para output
$Host.UI.RawUI.WindowTitle = "T√¥ De Olho - Deploy Inteligente"

Write-Host "üöÄ Iniciando Deploy Autom√°tico Inteligente..." -ForegroundColor Green
Write-Host "üß† Sistema verifica automaticamente se backfill √© necess√°rio" -ForegroundColor Cyan
Write-Host "üìÖ Per√≠odo configurado: $StartYear-$(if($EndYear -eq 0){'atual'}else{$EndYear})" -ForegroundColor Cyan
Write-Host "================================================================" -ForegroundColor Yellow

# Definir ano final se n√£o especificado
if ($EndYear -eq 0) {
    $EndYear = (Get-Date).Year
}

try {
    # 1. Verificar se Docker est√° rodando
    Write-Host "üîç Verificando Docker..." -ForegroundColor Blue
    docker info *>$null
    if ($LASTEXITCODE -ne 0) {
        throw "‚ùå Docker n√£o est√° rodando. Por favor, inicie o Docker Desktop e tente novamente."
    }

    # 2. Parar containers existentes (se houver)
    if ($Force) {
        Write-Host "üßπ Limpando ambiente existente (force mode)..." -ForegroundColor Yellow
        docker-compose down -v 2>$null
    }

    # 3. Rebuild das imagens (opcional)
    if (-not $SkipBuild) {
        Write-Host "üî® Construindo imagens Docker..." -ForegroundColor Blue
        docker-compose build --no-cache
        if ($LASTEXITCODE -ne 0) { throw "Falha no build das imagens" }
    }

    # 4. Iniciar servi√ßos de infraestrutura
    Write-Host "üóÉÔ∏è Iniciando banco de dados e cache..." -ForegroundColor Blue
    docker-compose up -d postgres redis
    if ($LASTEXITCODE -ne 0) { throw "Falha ao iniciar infraestrutura" }

    # 5. Aguardar banco ficar ready
    Write-Host "‚è≥ Aguardando PostgreSQL ficar dispon√≠vel..." -ForegroundColor Yellow
    $timeout = 60
    $elapsed = 0
    do {
        Start-Sleep -Seconds 2
        $elapsed += 2
        docker-compose exec -T postgres pg_isready -U postgres 2>$null
        $ready = ($LASTEXITCODE -eq 0)
    } while (-not $ready -and $elapsed -lt $timeout)
    
    if (-not $ready) { throw "PostgreSQL n√£o ficou dispon√≠vel em ${timeout}s" }

    # 6. Executar migrations
    Write-Host "üìã Executando migrations do banco..." -ForegroundColor Blue
    docker-compose run --rm backend ./server -migrate-only
    if ($LASTEXITCODE -ne 0) { throw "Falha nas migrations" }

    # 7. Iniciar backend para verificar backfill
    Write-Host "üîß Iniciando backend temporariamente..." -ForegroundColor Blue
    docker-compose up -d backend
    Start-Sleep -Seconds 5

    # 8. Sistema Inteligente de Backfill
    Write-Host "" -ForegroundColor White
    Write-Host "üß† Verificando necessidade de Backfill Hist√≥rico..." -ForegroundColor Green
    Write-Host "   üìä Per√≠odo: $StartYear-$EndYear" -ForegroundColor Cyan
    Write-Host "   üéØ O sistema decide automaticamente se precisa rodar" -ForegroundColor Cyan
    Write-Host "" -ForegroundColor White

    # Definir vari√°veis de ambiente para o backfill
    $env:BACKFILL_START_YEAR = $StartYear
    $env:BACKFILL_END_YEAR = $EndYear
    $env:BACKFILL_TRIGGERED_BY = "deploy"
    if ($ForceBackfill) {
        $env:BACKFILL_FORCE = "true"
        Write-Host "‚ö†Ô∏è For√ßando reexecu√ß√£o de backfill..." -ForegroundColor Yellow
    }

    # Executar ingestor inteligente
    Write-Host "ü§ñ Executando ingestor inteligente..." -ForegroundColor Blue
    
    # Capturar output do ingestor para verificar se executou backfill
    $ingestorOutput = docker-compose run --rm ingestor 2>&1
    $ingestorExitCode = $LASTEXITCODE

    Write-Host $ingestorOutput -ForegroundColor White

    if ($ingestorExitCode -ne 0) {
        # Verificar se falhou por backfill j√° executado
        if ($ingestorOutput -match "backfill.*n√£o necess√°rio|j√° foi executado|j√° em andamento") {
            Write-Host "‚úÖ Backfill n√£o necess√°rio - dados j√° atualizados!" -ForegroundColor Green
        } else {
            throw "Falha no ingestor inteligente"
        }
    } else {
        Write-Host "‚úÖ Ingestor executado com sucesso!" -ForegroundColor Green
    }

    # 9. Iniciar aplica√ß√£o completa
    Write-Host "üöÄ Iniciando aplica√ß√£o completa..." -ForegroundColor Blue
    docker-compose up -d frontend scheduler
    if ($LASTEXITCODE -ne 0) { throw "Falha ao iniciar aplica√ß√£o" }

    # 10. Aguardar aplica√ß√£o ficar ready
    Write-Host "‚è≥ Aguardando aplica√ß√£o ficar dispon√≠vel..." -ForegroundColor Yellow
    $timeout = 60
    $elapsed = 0
    do {
        Start-Sleep -Seconds 2
        $elapsed += 2
        try {
            $response = Invoke-WebRequest -Uri "http://localhost:8080/health" -UseBasicParsing -TimeoutSec 5
            $ready = ($response.StatusCode -eq 200)
        } catch {
            $ready = $false
        }
    } while (-not $ready -and $elapsed -lt $timeout)

    # 11. Verificar status do backfill
    Write-Host "" -ForegroundColor White
    Write-Host "üìä Verificando status do backfill..." -ForegroundColor Blue
    
    try {
        $backfillStatus = Invoke-RestMethod -Uri "http://localhost:8080/api/v1/backfill/status" -TimeoutSec 10
        if ($backfillStatus) {
            Write-Host "üéØ Status do Backfill:" -ForegroundColor Cyan
            Write-Host "   ‚Ä¢ Execu√ß√£o: $($backfillStatus.execution_id)" -ForegroundColor White
            Write-Host "   ‚Ä¢ Status: $($backfillStatus.status)" -ForegroundColor White
            Write-Host "   ‚Ä¢ Progresso: $($backfillStatus.progress_percentage.ToString('F1'))%" -ForegroundColor White
            Write-Host "   ‚Ä¢ Deputados: $($backfillStatus.deputados_processados)" -ForegroundColor White
            Write-Host "   ‚Ä¢ Proposi√ß√µes: $($backfillStatus.proposicoes_processadas)" -ForegroundColor White
        }
    } catch {
        Write-Host "‚ÑπÔ∏è Status de backfill n√£o dispon√≠vel (normal se n√£o executado)" -ForegroundColor DarkYellow
    }

    # 12. Status final
    Write-Host "" -ForegroundColor White
    Write-Host "‚úÖ Deploy Inteligente conclu√≠do com sucesso!" -ForegroundColor Green
    Write-Host "================================================================" -ForegroundColor Yellow
    Write-Host "üåê Frontend: http://localhost:3000" -ForegroundColor Cyan
    Write-Host "üîó API Backend: http://localhost:8080" -ForegroundColor Cyan
    Write-Host "üìä Adminer (DB): http://localhost:8081" -ForegroundColor Cyan
    Write-Host "üìà M√©tricas: docker-compose logs scheduler" -ForegroundColor Cyan
    Write-Host "ü§ñ Backfill Status: curl http://localhost:8080/api/v1/backfill/status" -ForegroundColor Cyan
    Write-Host "" -ForegroundColor White
    Write-Host "üîÑ Pr√≥xima sincroniza√ß√£o: Di√°ria √†s 6h (autom√°tica)" -ForegroundColor Yellow
    Write-Host "üìã Verificar dados: curl http://localhost:8080/api/v1/deputados" -ForegroundColor Yellow
    Write-Host "" -ForegroundColor White
    Write-Host "üéØ Sistema Inteligente ativo - Backfill autom√°tico conforme necess√°rio!" -ForegroundColor Green

} catch {
    Write-Host "" -ForegroundColor White
    Write-Host "‚ùå Erro durante o deploy: $($_.Exception.Message)" -ForegroundColor Red
    Write-Host "" -ForegroundColor White
    Write-Host "üîß Para debug, execute:" -ForegroundColor Yellow
    Write-Host "   docker-compose logs backend" -ForegroundColor Cyan
    Write-Host "   docker-compose logs ingestor" -ForegroundColor Cyan
    Write-Host "   docker-compose ps" -ForegroundColor Cyan
    exit 1
} finally {
    # Limpar vari√°veis de ambiente
    Remove-Item Env:BACKFILL_START_YEAR -ErrorAction SilentlyContinue
    Remove-Item Env:BACKFILL_END_YEAR -ErrorAction SilentlyContinue
    Remove-Item Env:BACKFILL_FORCE -ErrorAction SilentlyContinue
    Remove-Item Env:BACKFILL_TRIGGERED_BY -ErrorAction SilentlyContinue
}

# Perguntar se quer abrir o browser
$choice = Read-Host "`nüåê Abrir aplica√ß√£o no navegador? (s/N)"
if ($choice -eq 's' -or $choice -eq 'S') {
    Start-Process "http://localhost:3000"
}