# üê≥ Script para verificar e iniciar Docker - Projeto "T√¥ De Olho"

Write-Host "üê≥ Verificando Docker..." -ForegroundColor Cyan

# Verificar se Docker est√° instalado
try {
    $dockerVersion = docker --version
    Write-Host "‚úÖ Docker encontrado: $dockerVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Docker n√£o est√° instalado!" -ForegroundColor Red
    Write-Host "üì• Instale o Docker Desktop em: https://www.docker.com/products/docker-desktop/" -ForegroundColor Yellow
    exit 1
}

# Verificar se Docker est√° rodando
try {
    docker info | Out-Null
    Write-Host "‚úÖ Docker est√° rodando!" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Docker n√£o est√° rodando!" -ForegroundColor Red
    Write-Host "üöÄ Tentando iniciar Docker Desktop..." -ForegroundColor Yellow
    
    # Tentar iniciar Docker Desktop
    try {
        Start-Process "C:\Program Files\Docker\Docker\Docker Desktop.exe" -WindowStyle Hidden
        Write-Host "‚è≥ Aguardando Docker Desktop inicializar..." -ForegroundColor Yellow
        
        # Aguardar at√© 60 segundos
        $timeout = 60
        $elapsed = 0
        
        while ($elapsed -lt $timeout) {
            try {
                docker info | Out-Null
                Write-Host "‚úÖ Docker Desktop iniciado com sucesso!" -ForegroundColor Green
                break
            } catch {
                Start-Sleep -Seconds 2
                $elapsed += 2
                Write-Host "." -NoNewline
            }
        }
        
        if ($elapsed -ge $timeout) {
            Write-Host "`n‚ùå Timeout: Docker Desktop n√£o iniciou em $timeout segundos" -ForegroundColor Red
            Write-Host "üîß Inicie o Docker Desktop manualmente e execute este script novamente" -ForegroundColor Yellow
            exit 1
        }
        
    } catch {
        Write-Host "‚ùå N√£o foi poss√≠vel iniciar Docker Desktop automaticamente" -ForegroundColor Red
        Write-Host "üîß Inicie o Docker Desktop manualmente e execute este script novamente" -ForegroundColor Yellow
        exit 1
    }
}

Write-Host "`nüê≥ Iniciando containers do T√¥ De Olho..." -ForegroundColor Cyan
Write-Host "=" * 50 -ForegroundColor Gray

# Op√ß√µes para o usu√°rio
Write-Host "`nüìã Escolha o ambiente:" -ForegroundColor White
Write-Host "1. üöÄ Completo (Backend + Frontend + Banco + Redis)" -ForegroundColor Yellow
Write-Host "2. üóÑÔ∏è Apenas Infraestrutura (Banco + Redis)" -ForegroundColor Yellow
Write-Host "3. üîß Desenvolvimento (Infraestrutura + Monitoramento)" -ForegroundColor Yellow
Write-Host "4. ‚ùå Cancelar" -ForegroundColor Red

$choice = Read-Host "`nDigite sua escolha (1-4)"

switch ($choice) {
    "1" {
        Write-Host "`nüöÄ Subindo ambiente completo..." -ForegroundColor Green
        docker compose up -d --build
    }
    "2" {
        Write-Host "`nüóÑÔ∏è Subindo apenas infraestrutura..." -ForegroundColor Green  
        docker compose up -d postgres redis
    }
    "3" {
        Write-Host "`nüîß Subindo ambiente de desenvolvimento..." -ForegroundColor Green
        docker compose -f docker-compose.dev.yml up -d
    }
    "4" {
        Write-Host "‚ùå Opera√ß√£o cancelada" -ForegroundColor Red
        exit 0
    }
    default {
        Write-Host "‚ùå Op√ß√£o inv√°lida!" -ForegroundColor Red
        exit 1
    }
}

# Aguardar containers subirem
Write-Host "`n‚è≥ Aguardando containers iniciarem..." -ForegroundColor Yellow
Start-Sleep -Seconds 10

# Verificar status dos containers
Write-Host "`nüìä Status dos containers:" -ForegroundColor White
docker compose ps

# Verificar health checks
Write-Host "`nüè• Verificando health checks..." -ForegroundColor White

$containers = docker compose ps --format json | ConvertFrom-Json
foreach ($container in $containers) {
    $health = docker inspect $container.Name --format='{{.State.Health.Status}}' 2>$null
    if ($health) {
        $status = if ($health -eq "healthy") { "‚úÖ" } else { "‚ö†Ô∏è" }
        Write-Host "   $status $($container.Name): $health" -ForegroundColor $(if ($health -eq "healthy") { "Green" } else { "Yellow" })
    } else {
        Write-Host "   ‚ÑπÔ∏è $($container.Name): sem health check" -ForegroundColor Gray
    }
}

# Informa√ß√µes de acesso
Write-Host "`n" + "=" * 50 -ForegroundColor Gray
Write-Host "üéâ CONTAINERS INICIADOS!" -ForegroundColor Cyan  
Write-Host "=" * 50 -ForegroundColor Gray

Write-Host "`nüåê ACESSE OS SERVI√áOS:" -ForegroundColor White
Write-Host "   Frontend:    http://localhost:3000" -ForegroundColor Cyan
Write-Host "   Backend API: http://localhost:8080" -ForegroundColor Cyan
Write-Host "   PostgreSQL:  localhost:5432" -ForegroundColor Gray
Write-Host "   Redis:       localhost:6379" -ForegroundColor Gray

if ($choice -eq "3") {
    Write-Host "   Grafana:     http://localhost:3001 (admin/admin123)" -ForegroundColor Gray
    Write-Host "   Prometheus:  http://localhost:9090" -ForegroundColor Gray
    Write-Host "   RabbitMQ:    http://localhost:15672 (admin/admin123)" -ForegroundColor Gray
}

Write-Host "`nüîß COMANDOS √öTEIS:" -ForegroundColor White
Write-Host "   docker compose logs -f           # Ver logs em tempo real" -ForegroundColor Gray
Write-Host "   docker compose ps                # Status dos containers" -ForegroundColor Gray
Write-Host "   docker compose down              # Parar containers" -ForegroundColor Gray
Write-Host "   docker compose down -v           # Parar e remover volumes" -ForegroundColor Gray

Write-Host "`n‚úÖ Ambiente Docker configurado com sucesso!" -ForegroundColor Green
