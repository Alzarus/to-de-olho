name: 🚀 CI/CD Pipeline - Tô De Olho

on:
  push:
    branches: [ main, dev, feature/* ]
  pull_request:
    branches: [ main, dev ]

env:
  GO_VERSION: "1.24"
  NODE_VERSION: "20"
  POSTGRES_VERSION: "16"

jobs:
  # 🧪 Testes e Quality Gates
  test-backend:
    name: 🔍 Backend Tests & Quality
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: todo_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 3s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: 📂 Checkout code
      uses: actions/checkout@v4

    - name: 🐹 Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache-dependency-path: backend/go.sum

    - name: 📦 Download dependencies
      working-directory: ./backend
      run: go mod download

    - name: 🔍 Go vet
      working-directory: ./backend
      run: go vet ./...

    - name: 🧹 Go fmt check
      working-directory: ./backend
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "❌ Go code is not formatted. Run 'go fmt ./...'"
          gofmt -s -l .
          exit 1
        fi

    - name: 🏃‍♂️ Run unit tests (internal packages only)
      working-directory: ./backend
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_NAME: todo_test
        REDIS_HOST: localhost
        REDIS_PORT: 6379
      run: |
        echo "➡️ Executando testes apenas em ./internal/... (excluindo entrypoints cmd/*)"
        go test -v -race -coverprofile=coverage.out ./internal/...
        go tool cover -html=coverage.out -o coverage.html

    - name: 📊 Coverage check (internal code)
      working-directory: ./backend
      run: |
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
        echo "📊 Coverage: ${COVERAGE}%"
        if (( $(echo "$COVERAGE < 70" | bc -l) )); then
          echo "❌ Coverage ${COVERAGE}% is below minimum 70%"
          exit 1
        fi
        echo "✅ Coverage ${COVERAGE}% meets requirement"

    - name: 🔒 Security scan with gosec
      working-directory: ./backend
      run: |
        go install github.com/securego/gosec/v2/cmd/gosec@latest
        $(go env GOPATH)/bin/gosec -fmt json -out gosec-report.json ./...

    - name: 📈 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.out
        flags: backend
        name: backend-coverage

    - name: 📋 Upload test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-test-results
        path: |
          backend/coverage.html
          backend/gosec-report.json

  # 🎨 Frontend Tests
  test-frontend:
    name: 🎨 Frontend Tests & Quality  
    runs-on: ubuntu-latest

    steps:
    - name: 📂 Checkout code
      uses: actions/checkout@v4

    - name: ⚡ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: 📦 Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: 🔍 ESLint check
      working-directory: ./frontend
      run: npm run lint

    - name: 🏗️ Build check
      working-directory: ./frontend
      run: npm run build

    - name: 🧪 Run tests (when implemented)
      working-directory: ./frontend
      run: |
        echo "🚧 Frontend tests will be implemented in next iteration"
        # npm test -- --coverage --watchAll=false

  # 🐳 Docker Build & Security
  docker-build:
    name: 🐳 Docker Build & Security
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    if: github.event_name == 'push'

    steps:
    - name: 📂 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🏗️ Build backend image
      working-directory: ./backend
      run: |
        docker build -t todo-backend:${{ github.sha }} .
        docker tag todo-backend:${{ github.sha }} todo-backend:latest

    - name: 🏗️ Build frontend image
      working-directory: ./frontend
      run: |
        docker build --no-cache -t todo-frontend:${{ github.sha }} .
        docker tag todo-frontend:${{ github.sha }} todo-frontend:latest

    - name: 🔒 Run Trivy security scan
      run: |
        # Install Trivy
        sudo apt-get update
        sudo apt-get install wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install trivy

        # Scan backend
        trivy image --ignorefile .trivyignore --exit-code 1 --severity HIGH,CRITICAL todo-backend:latest

        # Scan frontend  
        trivy image --ignorefile .trivyignore --exit-code 1 --severity HIGH,CRITICAL todo-frontend:latest

  # 🚀 Deploy to Staging
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/dev' && github.event_name == 'push'
    environment: staging

    steps:
    - name: 📂 Checkout code
      uses: actions/checkout@v4

    - name: 🚀 Deploy to staging
      run: |
        echo "🚧 Staging deployment will be implemented with Docker registry"
        echo "🎯 Branch: ${{ github.ref }}"
        echo "📝 Commit: ${{ github.sha }}"
        # Future: Deploy to staging environment

  # 🌟 Deploy to Production
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
    - name: 📂 Checkout code
      uses: actions/checkout@v4

    - name: 🌟 Deploy to production
      run: |
        echo "🚧 Production deployment will be implemented with Docker registry"
        echo "🎯 Branch: ${{ github.ref }}"
        echo "📝 Commit: ${{ github.sha }}"
        # Future: Deploy to production environment

  # 📊 Performance Tests
  performance-tests:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: [test-backend]
    if: github.event_name == 'push'

    steps:
    - name: 📂 Checkout code
      uses: actions/checkout@v4

    - name: 🐹 Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: ⚡ Run benchmarks
      working-directory: ./backend
      run: |
        go test -bench=. -benchmem ./... | tee benchmark-results.txt

    - name: 📊 Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: backend/benchmark-results.txt
